package news

import (
	"encoding/json"
	"fmt"
	"github.com/rianekacahya/news/internal/v1/news/entity"
	"github.com/rianekacahya/news/pkg/errors"
	"github.com/rianekacahya/news/pkg/rabbitmq"
	"github.com/rianekacahya/news/pkg/redis"
	"golang.org/x/sync/errgroup"
	"time"
)

func (DI *news) List(request *entity.Request) (entity.NewsSlice, error) {
	var errs errgroup.Group

	data, _ := DI.repository.List(request.Limit, request.Offset())

	// Populating data dengan multiprocessing
	for i := 0; i < len(data); i++ {
		i:=i
		errs.Go(func() error {
			// get cache data
			cache, err := redis.GetConnection().HGetAll(fmt.Sprint(data[i].ID)).Result()
			if err != nil {
				return errors.New(errors.Badrequest, errors.Message(fmt.Sprintf("Error when get data : %v", err)))
			}

			// if data cache ready, get data from redis
			if len(cache) > 0 {
				data[i].Author = cache["author"]
				data[i].Body = cache["body"]
			} else {
				// get data from DB
				detail, _ := DI.repository.Detail(data[i].ID)

				// set news cache
				if _, err = redis.GetConnection().HMSet(fmt.Sprint(data[i].ID), map[string]interface{}{
					"author":  detail.Author,
					"body":    detail.Body,
				}).Result(); err != nil {
					return errors.New(errors.Badrequest, errors.Message(fmt.Sprintf("Error when get data : %v", err)))
				}

				// Set news expire cache 15 detik
				if _, err := redis.GetConnection().Expire(fmt.Sprint(data[i].ID), time.Duration(15)*time.Second).Result(); err != nil {
					return errors.New(errors.Badrequest, errors.Message(fmt.Sprintf("Error when get data : %v", err)))
				}

				// cast data for result
				data[i].Author = detail.Author
				data[i].Body = detail.Body
			}

			return nil
		})
	}

	// get any error on goroutine
	if err := errs.Wait(); err != nil {
		return nil, err
	}

	return data, nil
}

func (DI *news) Create(news *entity.News, requestID string) (*entity.News, error) {
	// add additional data to message body
	news.Created = time.Now()

	// preparing message body
	data, err := json.Marshal(news)
	if err != nil {
		return nil, errors.New(errors.Generic, errors.Message(fmt.Sprintf("Error when marshal message : %v", err)))
	}

	// publish message with tracking ID using autogenerated request ID
	err = rabbitmq.Publish(entity.TopicInsertNews, data, requestID)
	if err != nil {
		return nil, errors.New(errors.Generic, errors.Message(fmt.Sprintf("Error when publishing message : %v", err)))
	}

	return news, nil
}

func (DI *news) Insert(news *entity.News) error {
	var payload = new(entity.News)

	// insert data to mysql
	newsID, err := DI.repository.InsertSQL(news)
	if err != nil {
		return err
	}

	// save to elasticsearch
	payload.ID = newsID
	payload.Created = news.Created
	if err = DI.repository.InsertElasticsearch(payload); err != nil {
		return err
	}

	return nil
}
